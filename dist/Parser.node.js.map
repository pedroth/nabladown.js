{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Utils.js","webpack:///external \"@babel/runtime/helpers/esm/toConsumableArray\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/esm/asyncToGenerator\"","webpack:///./src/Lexer.js","webpack:///./src/Parser.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","pair","a","b","left","right","stream","stringOrArray","array","next","slice","peek","hasNext","length","isEmpty","toString","map","JSON","stringify","join","filter","predicate","log","console","or","accError","rules","error","returnOne","listOfPredicates","defaultValue","input","evalScriptTag","scriptTag","globalEval","eval","srcUrl","attributes","textContent","fetch","then","code","text","Promise","re","_","innerText","asyncForEach","asyncLambdas","asyncLambda","isParagraph","domNode","constructor","require","tokenRepeatLessThan","symbol","repeat","auxStream","textArray","push","finalN","type","Error","tokenSymbol","sym","tokenText","keyWords","token","includes","parse","string","program","parseProgram","parseTitle","Title","nextStream","parseSeq","Seq","parseStatement","Statement","parseExpression","expression","nextNextStream","charStream","acc","tokenizer","level","parseSeqTypes","SeqTypes","parseFormula","Formula","parseHtml","Html","parseCode","Code","parseLinkStat","LinkStat","next3Stream","parseAnyBut","AnyBut","next4Stream","link","parseLink","Link","parseMedia","Media","parseItalic","Italic","parseBold","Bold","parseSingle","Single","parseText","Text","nextToken","equation","isInline","html","lineCodeTokenPredicate","parseLineCode","LineCode","languageAnyBut","language","parseBlockCode","BlockCode","tokenPredicate","parseLinkType","LinkType"],"mappings":"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","file":"Parser.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","//========================================================================================\n/*                                                                                      *\n *                                         UTILS                                        *\n *                                                                                      */\n//========================================================================================\n\n/**\n * creates a pair pair: (a,b) => pair\n * @param {*} a left\n * @param {*} b right\n */\nexport function pair(a, b) {\n  return { left: a, right: b };\n}\n\n/**\n * creates a stream from a string, string => stream\n * @param {*} string\n */\nexport function stream(stringOrArray) {\n  // copy array or string to array\n  const array = [...stringOrArray];\n  return {\n    next: () => stream(array.slice(1)),\n    peek: () => array[0],\n    hasNext: () => array.length >= 1,\n    isEmpty: () => array.length === 0,\n    toString: () =>\n      array.map(s => (typeof s === \"string\" ? s : JSON.stringify(s))).join(\"\"),\n    filter: predicate => stream(array.filter(predicate)),\n    log: () => {\n      let s = stream(array);\n      while (s.hasNext()) {\n        console.log(s.peek());\n        s = s.next();\n      }\n    }\n  };\n}\n\n/**\n *  Select one rule\n * @param  {...any} rules\n */\nexport function or(...rules) {\n  let accError = null;\n  for (let i = 0; i < rules.length; i++) {\n    try {\n      return rules[i]();\n    } catch (error) {\n      accError = error;\n    }\n  }\n  throw accError;\n}\n\n/**\n * Returns a value based on the predicate\n * @param {*} listOfPredicates\n * @param {*} defaultValue\n */\nexport function returnOne(listOfPredicates, defaultValue) {\n  return input => {\n    for (let i = 0; i < listOfPredicates.length; i++) {\n      if (listOfPredicates[i].predicate(input))\n        return listOfPredicates[i].value(input);\n    }\n    return defaultValue;\n  };\n}\n\nexport function evalScriptTag(scriptTag) {\n  const globalEval = eval;\n  const srcUrl = scriptTag?.attributes[\"src\"]?.textContent;\n  if (!!srcUrl) {\n    return fetch(srcUrl)\n      .then(code => code.text())\n      .then(code => {\n        globalEval(code);\n      });\n  } else {\n    return new Promise((re, _) => {\n      globalEval(scriptTag.innerText);\n      re(true);\n    });\n  }\n}\n\nexport async function asyncForEach(asyncLambdas) {\n  for (const asyncLambda of asyncLambdas) {\n    await asyncLambda();\n  }\n}\n\nexport function functionEncode(functionString) {\n  return functionString.replaceAll('\"', \"'\");\n}\n\nexport function isParagraph(domNode) {\n  return domNode.constructor.name === \"HTMLParagraphElement\";\n}\n","module.exports = require(\"@babel/runtime/helpers/esm/toConsumableArray\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/esm/asyncToGenerator\");","import { or, pair, stream } from \"./Utils\";\n//========================================================================================\n/*                                                                                      *\n *                                     LEX ANALYSIS                                     *\n *                                                                                      */\n//========================================================================================\n\n//========================================================================================\n/*                                                                                      *\n * Tokens\n * #^{1..6}\n * $^{1..2}\n * \\n\n * [\n * ]\n * (\n * )\n * *^{1..2}\n *                                                                                      */\n//========================================================================================\n\n/**\n * Token := {type: String, text: String}\n *\n * keywords :=  #$][)('\\n'*`\n * tokens: rep(`, 1..3), rep(+, 3), rep(*, 1..2), rep($,1..2), rep(#,1..6), 'text', ']', '[', '(', ')', '\\n'\n * 'text' := ¬ keywords\n *\n */\n\n/**\n * stream<char> => stream<tokens>\n * @param {*} s:Stream<Chars>\n * @returns Stream<Tokens>\n */\nexport function tokenizer(charStream) {\n  const acc = [];\n  let s = charStream;\n  while (s.hasNext()) {\n    const { left: token, right: next } = or(\n      () => tokenRepeatLessThan(\"#\", 6)(s),\n      () => tokenRepeatLessThan(\"$\", 2)(s),\n      () => tokenRepeatLessThan(\"*\", 2)(s),\n      () => tokenRepeatLessThan(\"+\", 3)(s),\n      () => tokenRepeatLessThan(\"`\", 3)(s),\n      () => tokenSymbol(\"\\n\")(s),\n      () => tokenSymbol(\"[\")(s),\n      () => tokenSymbol(\"]\")(s),\n      () => tokenSymbol(\"(\")(s),\n      () => tokenSymbol(\")\")(s),\n      () => tokenSymbol(\" \")(s),\n      () => tokenSymbol(\"!\")(s),\n      () => tokenText(s)\n    );\n    acc.push(token);\n    s = next;\n  }\n  return stream(acc);\n}\n\nexport function tokenRepeatLessThan(symbol, repeat) {\n  return stream => {\n    let n = repeat;\n    let auxStream = stream;\n    let textArray = [];\n    while (auxStream.peek() === symbol && n >= 0) {\n      n--;\n      textArray.push(auxStream.peek());\n      auxStream = auxStream.next();\n    }\n    const finalN = repeat - n;\n    if (finalN > 0) {\n      return pair(\n        { type: symbol, repeat: finalN, text: textArray.join(\"\") },\n        auxStream\n      );\n    }\n    throw new Error(\n      `Error occurred while tokening repeated #${repeat}, with symbol ${symbol} ` +\n        auxStream.toString()\n    );\n  };\n}\n\nexport function tokenSymbol(symbol) {\n  return stream => {\n    const sym = [...symbol];\n    let s = stream;\n    let i = 0;\n    while (i < sym.length) {\n      if (s.peek() === sym[i]) {\n        i++;\n        s = s.next();\n      } else {\n        throw new Error(\n          `Error occurred while tokening unique symbol ${symbol} ` +\n            auxStream.toString()\n        );\n      }\n    }\n    return pair({ type: symbol, repeat: 1, text: symbol }, s);\n  };\n}\n\nexport function tokenText(stream) {\n  const keyWords = [...\"!`*#$[]()\\n \"];\n  const token = [];\n  let s = stream;\n  while (s.hasNext() && !keyWords.includes(s.peek())) {\n    token.push(s.peek());\n    s = s.next();\n  }\n  return pair({ type: \"text\", text: token.join(\"\") }, s);\n}\n","//========================================================================================\n/*                                                                                      *\n *                                        PARSER                                        *\n *                                                                                      */\n//========================================================================================\n\nimport { tokenizer } from \"./Lexer\";\nimport { or, pair, stream } from \"./Utils\";\n\n/**\n * Grammar\n *\n * Program -> Expression Program | epsilon\n * Expression -> Statement'\\n'\n * Statement -> Title | Seq\n * Title -> '#' Seq | '#'Seq\n * Seq -> SeqTypes Seq | epsilon\n * SeqTypes -> Formula / Html / Code / Link / Media / Italic / Bold / Text\n * Formula -> '$' AnyBut('$') '$'\n * Html -> '+++' AnyBut('+++') '+++'\n * Code -> LineCode / BlockCode\n * LineCode -> `AnyBut('\\n', '`')`\n * BlockCode-> ```AnyBut('\\n')'\\n' AnyBut('`')```\n * Link -> [LinkStat](AnyBut('\\n', ')'))\n * LinkStat -> LinkTypes LinkStat | epsilon\n * LinkTypes -> Formula / Html / Code / Italic / Bold / Single('\\n', ']')\n * Media -> ![LinkStat](AnyBut('\\n', ')'))\n * Italic -> *SeqTypes*\n * Bold -> **SeqTypes**\n * Text -> AnyBut('$', '+', '`', '[', '*', '\\n') / Single('\\n')\n * AnyBut(s) -> ¬s AnyBut(s) | epsilon\n * Single(s) -> ¬s\n */\n\n/**\n * parse: String => Abstract syntactic tree\n * @param {*} string\n * @returns Parsing Tree\n */\nexport function parse(string) {\n  const charStream = stream(string);\n  const tokenStream = tokenizer(charStream);\n  const program = parseProgram(tokenStream);\n  console.log(\"Parse tree\", program.left);\n  return program.left;\n}\n\n/**\n * stream => pair(Program, stream)\n *\n * @param {*} stream\n */\nfunction parseProgram(stream) {\n  return or(\n    () => {\n      const { left: expression, right: nextStream } = parseExpression(stream);\n      const { left: program, right: nextNextStream } = parseProgram(nextStream);\n      return pair(\n        {\n          type: \"program\",\n          expression: expression,\n          program: program\n        },\n        nextNextStream\n      );\n    },\n    () => pair({ type: \"program\", expression: null, program: null }, stream)\n  );\n}\n\n/**\n * stream => pair(Expression, stream)\n *\n * @param {*} stream\n */\nfunction parseExpression(stream) {\n  const { left: Statement, right: nextStream } = parseStatement(stream);\n  if (nextStream.peek().type === \"\\n\") {\n    return pair(\n      {\n        type: \"expression\",\n        Statement\n      },\n      nextStream.next()\n    );\n  }\n  throw new Error(\n    \"Error occurred while parsing expression,\" + nextStream.toString()\n  );\n}\n\n/**\n * stream => pair(Statement, stream)\n * @param {*} stream\n */\nfunction parseStatement(stream) {\n  return or(\n    () => {\n      const { left: Title, right: nextStream } = parseTitle(stream);\n      return pair({ type: \"statement\", Title }, nextStream);\n    },\n    () => {\n      const { left: Seq, right: nextStream } = parseSeq(stream);\n      return pair({ type: \"statement\", Seq }, nextStream);\n    }\n  );\n}\n\n/**\n *\n * stream => pair(Title, stream)\n * @param {*} stream\n */\nfunction parseTitle(stream) {\n  if (stream.peek().type === \"#\") {\n    const level = stream.peek().repeat;\n    // shortcut in parsing this rule\n    const filterNextSpace =\n      stream.next().peek().type === \" \" ? stream.next().next() : stream.next();\n    const { left: Seq, right: nextStream } = parseSeq(filterNextSpace);\n    return pair({ type: \"title\", Seq, level }, nextStream);\n  }\n  throw new Error(\n    \"Error occurred while parsing Title,\" + nextStream.toString()\n  );\n}\n\n/**\n *\n * stream => pair(Seq, stream)\n * @param {*} stream\n */\nfunction parseSeq(stream) {\n  return or(\n    () => {\n      const { left: SeqTypes, right: nextStream } = parseSeqTypes(stream);\n      const { left: Seq, right: nextNextStream } = parseSeq(nextStream);\n      return pair({ type: \"seq\", SeqTypes, Seq }, nextNextStream);\n    },\n    () => pair({ type: \"seq\", isEmpty: true }, stream)\n  );\n}\n\n/**\n *\n * stream => pair(SeqTypes, stream)\n * @param {*} stream\n */\nfunction parseSeqTypes(stream) {\n  return or(\n    () => {\n      const { left: Formula, right: nextStream } = parseFormula(stream);\n      return pair({ type: \"seqTypes\", Formula }, nextStream);\n    },\n    () => {\n      const { left: Html, right: nextStream } = parseHtml(stream);\n      return pair({ type: \"seqTypes\", Html }, nextStream);\n    },\n    () => {\n      const { left: Code, right: nextStream } = parseCode(stream);\n      return pair({ type: \"seqTypes\", Code }, nextStream);\n    },\n    () => {\n      const { left: Link, right: nextStream } = parseLink(stream);\n      return pair({ type: \"seqTypes\", Link }, nextStream);\n    },\n    () => {\n      const { left: Media, right: nextStream } = parseMedia(stream);\n      return pair({ type: \"seqTypes\", Media }, nextStream);\n    },\n    () => {\n      const { left: Italic, right: nextStream } = parseItalic(stream);\n      return pair({ type: \"seqTypes\", Italic }, nextStream);\n    },\n    () => {\n      const { left: Bold, right: nextStream } = parseBold(stream);\n      return pair({ type: \"seqTypes\", Bold }, nextStream);\n    },\n    () => {\n      const { left: Text, right: nextStream } = parseText(stream);\n      return pair({ type: \"seqTypes\", Text }, nextStream);\n    }\n  );\n}\n\n/**\n *\n * stream => pair(Text, stream)\n * @param {*} stream\n */\nfunction parseText(stream) {\n  return or(\n    () => {\n      const { left: AnyBut, right: nextStream } = parseAnyBut(t =>\n        [\"$\", \"+\", \"`\", \"[\", \"*\", \"\\n\"].includes(t.type)\n      )(stream);\n      if (AnyBut.textArray.length > 0) {\n        return pair(\n          { type: \"text\", text: AnyBut.textArray.join(\"\") },\n          nextStream\n        );\n      }\n      throw new Error(\"Error occurred while parsing Text,\" + stream.toString());\n    },\n    () => {\n      const { left: Single, right: nextStream } = parseSingle(\n        t => t.type === \"\\n\"\n      )(stream);\n      return pair({ type: \"text\", text: Single.text }, nextStream);\n    }\n  );\n}\n\n/**\n *\n * stream => pair(Italic, stream)\n * @param {*} stream\n */\nfunction parseItalic(stream) {\n  const token = stream.peek();\n  if (token.type === \"*\" && token.repeat === 1) {\n    const { left: SeqTypes, right: nextStream } = parseSeqTypes(stream.next());\n    const nextToken = nextStream.peek();\n    if (nextToken.type === \"*\" && nextToken.repeat === 1) {\n      return pair({ type: \"italic\", SeqTypes }, nextStream.next());\n    }\n  }\n  throw new Error(\n    \"Error occurred while parsing Italic,\" + nextStream.toString()\n  );\n}\n\n/**\n *\n * stream => pair(Bold, stream)\n * @param {*} stream\n */\nfunction parseBold(stream) {\n  const token = stream.peek();\n  if (token.type === \"*\" && token.repeat === 2) {\n    const { left: SeqTypes, right: nextStream } = parseSeqTypes(stream.next());\n    const nextToken = nextStream.peek();\n    if (nextToken.type === \"*\" && nextToken.repeat === 2) {\n      return pair({ type: \"bold\", SeqTypes }, nextStream.next());\n    }\n  }\n  throw new Error(\n    \"Error occurred while parsing Italic,\" + nextStream.toString()\n  );\n}\n\n/**\n *\n * stream => pair(Formula, stream)\n * @param {*} stream\n */\nfunction parseFormula(stream) {\n  const token = stream.peek();\n  const repeat = token.repeat;\n  const error = new Error(\n    \"Error occurred while parsing Formula,\" + stream.toString()\n  );\n  if (token.type === \"$\") {\n    const { left: AnyBut, right: nextStream } = parseAnyBut(token =>\n      [\"$\"].includes(token.type)\n    )(stream.next());\n    const nextToken = nextStream.peek();\n    if (nextToken.type === \"$\" && nextToken?.repeat === repeat) {\n      return pair(\n        {\n          type: \"formula\",\n          equation: AnyBut.textArray.join(\"\"),\n          isInline: nextToken?.repeat === 1\n        },\n        nextStream.next()\n      );\n    }\n  }\n  throw error;\n}\n\n/**\n *\n * stream => pair(Html, stream)\n * @param {*} stream\n */\nfunction parseHtml(stream) {\n  const token = stream.peek();\n  const repeat = token.repeat;\n  const error = new Error(\n    \"Error occurred while parsing Html,\" + stream.toString()\n  );\n  if (token.type === \"+\" && repeat === 3) {\n    const { left: AnyBut, right: nextStream } = parseAnyBut(\n      token => [\"+\"].includes(token.type) && 3 === token?.repeat\n    )(stream.next());\n    const nextToken = nextStream.peek();\n    if (nextToken.type === \"+\" && nextToken?.repeat === repeat) {\n      return pair(\n        {\n          type: \"html\",\n          html: AnyBut.textArray.join(\"\")\n        },\n        nextStream.next()\n      );\n    }\n  }\n  throw error;\n}\n\n/**\n *\n * stream => pair(Code, stream)\n * @param {*} stream\n */\nfunction parseCode(stream) {\n  return or(\n    () => {\n      const { left: LineCode, right: nextStream } = parseLineCode(stream);\n      return pair({ type: \"code\", LineCode }, nextStream);\n    },\n    () => {\n      const { left: BlockCode, right: nextStream } = parseBlockCode(stream);\n      return pair({ type: \"code\", BlockCode }, nextStream);\n    }\n  );\n}\n\n/**\n *\n * stream => pair(LineCode, stream)\n * @param {*} stream\n */\nfunction parseLineCode(stream) {\n  const lineCodeTokenPredicate = t => t.type === \"`\" && t.repeat === 1;\n  const token = stream.peek();\n  if (lineCodeTokenPredicate(token)) {\n    const { left: AnyBut, right: nextStream } = parseAnyBut(\n      t => lineCodeTokenPredicate(t) || t.type === \"\\n\"\n    )(stream.next());\n    if (lineCodeTokenPredicate(nextStream.peek())) {\n      return pair(\n        { type: \"lineCode\", code: AnyBut.textArray.join(\"\") },\n        nextStream.next()\n      );\n    }\n  }\n  throw new Error(\"Error occurred while parsing LineCode,\" + stream.toString());\n}\n\n/**\n *\n * stream => pair(BlockCode, stream)\n * @param {*} stream\n */\nfunction parseBlockCode(stream) {\n  const lineCodeTokenPredicate = t => t.type === \"`\" && t.repeat === 3;\n  const token = stream.peek();\n  if (lineCodeTokenPredicate(token)) {\n    const { left: languageAnyBut, right: nextStream } = parseAnyBut(\n      t => t.type === \"\\n\"\n    )(stream.next());\n    const { left: AnyBut, right: nextNextStream } = parseAnyBut(\n      lineCodeTokenPredicate\n    )(nextStream.next());\n    if (lineCodeTokenPredicate(nextNextStream.peek())) {\n      return pair(\n        {\n          type: \"blockCode\",\n          code: AnyBut.textArray.join(\"\"),\n          language: languageAnyBut.textArray.join(\"\")\n        },\n        nextNextStream.next()\n      );\n    }\n  }\n  throw new Error(\n    \"Error occurred while parsing BlockCode,\" + stream.toString()\n  );\n}\n\n/**\n *\n * (token => boolean) => stream => pair(AnyBut, stream)\n * @param {*} tokenPredicate: token => boolean\n */\nfunction parseAnyBut(tokenPredicate) {\n  return stream => {\n    return or(\n      () => {\n        const peek = stream.peek();\n        if (!tokenPredicate(peek)) {\n          const { left: AnyBut, right: nextStream } = parseAnyBut(\n            tokenPredicate\n          )(stream.next());\n          return pair(\n            { type: \"anyBut\", textArray: [peek.text, ...AnyBut.textArray] },\n            nextStream\n          );\n        }\n        throw new Error(\n          \"Error occurred while parsing AnyBut,\" + stream.toString()\n        );\n      },\n      () => pair({ type: \"anyBut\", textArray: [] }, stream)\n    );\n  };\n}\n\n/**\n *\n * stream => pair(Link, stream)\n * @param {*} stream\n */\nfunction parseLink(stream) {\n  // ugly\n  if (stream.peek().type === \"[\") {\n    const nextStream = stream.next();\n    const { left: LinkStat, right: nextNextStream } = parseLinkStat(nextStream);\n    if (nextNextStream.peek().type === \"]\") {\n      const next3Stream = nextNextStream.next();\n      if (next3Stream.peek().type === \"(\") {\n        const { left: AnyBut, right: next4Stream } = parseAnyBut(token =>\n          [\"\\n\", \")\"].includes(token.type)\n        )(next3Stream.next());\n        if (next4Stream.peek().type === \")\") {\n          return pair(\n            { type: \"link\", LinkStat, link: AnyBut.textArray.join(\"\") },\n            next4Stream.next()\n          );\n        }\n      }\n    }\n  }\n  throw new Error(\"Error occurred while parsing Link,\" + stream.toString());\n}\n\n/**\n *\n * stream => pair(Media, stream)\n * @param {*} stream\n */\nfunction parseMedia(stream) {\n  // ugly\n  if (stream.peek().type === \"!\") {\n    const nextStream = stream.next();\n    if (nextStream.peek().type === \"[\") {\n      const { left: LinkStat, right: nextNextStream } = parseLinkStat(\n        nextStream.next()\n      );\n      if (nextNextStream.peek().type === \"]\") {\n        const next3Stream = nextNextStream.next();\n        if (next3Stream.peek().type === \"(\") {\n          const { left: AnyBut, right: next4Stream } = parseAnyBut(token =>\n            [\"\\n\", \")\"].includes(token.type)\n          )(next3Stream.next());\n          if (next4Stream.peek().type === \")\") {\n            return pair(\n              { type: \"media\", LinkStat, link: AnyBut.textArray.join(\"\") },\n              next4Stream.next()\n            );\n          }\n        }\n      }\n    }\n  }\n  throw new Error(\"Error occurred while parsing Link,\" + stream.toString());\n}\n\n/**\n * stream => pair(LinkStat, stream)\n * @param {*} stream\n */\nfunction parseLinkStat(stream) {\n  return or(\n    () => {\n      const { left: LinkType, right: nextStream } = parseLinkType(stream);\n      const { left: LinkStat, right: nextNextStream } = parseLinkStat(\n        nextStream\n      );\n      return pair({ type: \"linkStat\", LinkType, LinkStat }, nextNextStream);\n    },\n    () => pair({ type: \"linkStat\", isEmpty: true }, stream)\n  );\n}\n\n/**\n * stream => pair(LinkType, stream)\n * @param {*} stream\n */\nfunction parseLinkType(stream) {\n  return or(\n    () => {\n      const { left: Formula, right: nextStream } = parseFormula(stream);\n      return pair({ type: \"linkType\", Formula }, nextStream);\n    },\n    () => {\n      const { left: Html, right: nextStream } = parseHtml(stream);\n      return pair({ type: \"linkType\", Html }, nextStream);\n    },\n    () => {\n      const { left: Code, right: nextStream } = parseCode(stream);\n      return pair({ type: \"linkType\", Code }, nextStream);\n    },\n    () => {\n      const { left: Italic, right: nextStream } = parseItalic(stream);\n      return pair({ type: \"linkType\", Italic }, nextStream);\n    },\n    () => {\n      const { left: Bold, right: nextStream } = parseBold(stream);\n      return pair({ type: \"linkType\", Bold }, nextStream);\n    },\n    () => {\n      const { left: Single, right: nextStream } = parseSingle(token =>\n        [\"\\n\", \"]\"].includes(token.type)\n      )(stream);\n      return pair({ type: \"linkType\", Single }, nextStream);\n    }\n  );\n}\n\n/**\n *\n * (token => boolean) => stream => pair(Single, stream)\n * @param {*} tokenPredicate: token => boolean\n */\nfunction parseSingle(tokenPredicate) {\n  return stream => {\n    const token = stream.peek();\n    if (!tokenPredicate(token)) {\n      const text = token.text || \"\";\n      return pair({ type: \"single\", text: text }, stream.next());\n    }\n    throw new Error(\"Error occurred while parsing Single,\" + stream.toString());\n  };\n}\n"],"sourceRoot":""}